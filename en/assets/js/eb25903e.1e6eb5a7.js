"use strict";(self.webpackChunkrevyos_docs_new=self.webpackChunkrevyos_docs_new||[]).push([[4566],{5320:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"benchmark/lmbench","title":"lmbench for Lpi4A","description":"Software Version","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/benchmark/lmbench.md","sourceDirName":"benchmark","slug":"/benchmark/lmbench","permalink":"/revyos-docs-new/en/docs/benchmark/lmbench","draft":false,"unlisted":false,"editUrl":"https://github.com/kagura114/revyos-docs-new/docs/benchmark/lmbench.md","tags":[],"version":"current","frontMatter":{},"sidebar":"documentSidebar","previous":{"title":"glmark2","permalink":"/revyos-docs-new/en/docs/benchmark/glmark2"},"next":{"title":"p7zip","permalink":"/revyos-docs-new/en/docs/benchmark/p7zip"}}');var o=t(4848),r=t(8453);const a={},i="lmbench for Lpi4A",l={},c=[{value:"Software Version",id:"software-version",level:2},{value:"Test Description",id:"test-description",level:2},{value:"Test Preparation",id:"test-preparation",level:2},{value:"Test Execution",id:"test-execution",level:2},{value:"Test Results",id:"test-results",level:2},{value:"Test Notes",id:"test-notes",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"lmbench-for-lpi4a",children:"lmbench for Lpi4A"})}),"\n",(0,o.jsx)(n.h2,{id:"software-version",children:"Software Version"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"lmbench for RevyOS"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"test-description",children:"Test Description"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Bandwidth Measurement Tool"}),(0,o.jsx)(n.th,{children:"Latency Measurement Tool"}),(0,o.jsx)(n.th,{children:"Others"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Read Cache File"}),(0,o.jsx)(n.td,{children:"Context Switching"}),(0,o.jsx)(n.td,{children:"\\"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Copy Memory"}),(0,o.jsx)(n.td,{children:"Network: Connection Establishment, Pipe, TCP, UDP, and RPC Hot Potato"}),(0,o.jsx)(n.td,{children:"\\"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Read Memory"}),(0,o.jsx)(n.td,{children:"File System Creation and Deletion"}),(0,o.jsx)(n.td,{children:"\\"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Write Memory"}),(0,o.jsx)(n.td,{children:"Process Creation"}),(0,o.jsx)(n.td,{children:"Processor Clock Rate Calculation"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Pipe"}),(0,o.jsx)(n.td,{children:"Signal Handling"}),(0,o.jsx)(n.td,{children:"\\"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"TCP"}),(0,o.jsx)(n.td,{children:"Upper-Level System Calls"}),(0,o.jsx)(n.td,{children:"\\"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"\\"}),(0,o.jsx)(n.td,{children:"Memory Read Latency"}),(0,o.jsx)(n.td,{children:"\\"})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"test-preparation",children:"Test Preparation"}),"\n",(0,o.jsx)(n.p,{children:"Download the testing tool:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"git clone https://github.com/revyos/lmbench3.git\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"This version has been ported for RevyOS."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Before starting the tests, you need to install the dependencies:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"sudo apt install gcc make libntirpc-dev -y\n"})}),"\n",(0,o.jsx)(n.h2,{id:"test-execution",children:"Test Execution"}),"\n",(0,o.jsx)(n.p,{children:"Execute the commands to compile, configure, and test:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"cd lmbench3\ncd src\nmake results\n"})}),"\n",(0,o.jsx)(n.p,{children:"After compilation, the following options will prompt you to set:"}),"\n",(0,o.jsx)(n.p,{children:"The options that do not require changes can be left blank to automatically set default values."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"MULTIPLE COPIES [default 1]"}),": Sets the number of concurrent instances of lmbench to run. Running more instances may slow down lmbench. The default is 1, so set it to the default value of 1."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"=====================================================================\n\nIf you are running on an MP machine and you want to try running\nmultiple copies of lmbench in parallel, you can specify how many here.\n\nUsing this option will make the benchmark run 100x slower (sorry).\n\nNOTE:  WARNING! This feature is experimental and many results are \n\tknown to be incorrect or random!\n\nMULTIPLE COPIES [default 1]: \n=====================================================================\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Job placement selection [default 1]"}),": Controls job scheduling methods. The default is 1, which allows job scheduling, so set it to the default value."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"=====================================================================\n\nOptions to control job placement\n1) Allow scheduler to place jobs\n2) Assign each benchmark process with any attendant child processes\n   to its own processor\n3) Assign each benchmark process with any attendant child processes\n   to its own processor, except that it will be as far as possible\n   from other processes\n4) Assign each benchmark and attendant processes to their own\n   processors\n5) Assign each benchmark and attendant processes to their own\n   processors, except that they will be as far as possible from\n   each other and other processes\n6) Custom placement: you assign each benchmark process with attendant\n   child processes to processors\n7) Custom placement: you assign each benchmark and attendant\n   processes to processors\n\nNote: some benchmarks, such as bw_pipe, create attendant child\nprocesses for each benchmark process.  For example, bw_pipe\nneeds a second process to send data down the pipe to be read\nby the benchmark process.  If you have three copies of the\nbenchmark process running, then you actually have six processes;\nthree attendant child processes sending data down the pipes and \nthree benchmark processes reading data and doing the measurements.\n\nJob placement selection [default 1]: \n=====================================================================\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Memory"}),": Sets the test memory size. The default is ",(0,o.jsx)(n.code,{children:"$MB"}),", which is the maximum testable memory calculated by the program, or you can manually define the test value. Here, we will use the default value."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"=====================================================================\n\nSeveral benchmarks operate on a range of memory.  This memory should be\nsized such that it is at least 4 times as big as the external cache[s]\non your system.   It should be no more than 80% of your physical memory.\n\nThe bigger the range, the more accurate the results, but larger sizes\ntake somewhat longer to run the benchmark.\n\nMB [default 686]: \nChecking to see if you have 686 MB; please wait for a moment...\n686MB OK\n686MB OK\n686MB OK\nHang on, we are calculating your cache line size.\nOK, it looks like your cache line is 64 bytes.\n\n=====================================================================\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"SUBSET (ALL|HARDWARE|OS|DEVELOPMENT) [default all]"}),": Selects the test set, which includes ",(0,o.jsx)(n.code,{children:"ALL/HARDWARE/OS/DEVELOPMENT"}),". The default is ",(0,o.jsx)(n.code,{children:"all"}),", so we will select ",(0,o.jsx)(n.code,{children:"all"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"=====================================================================\n\nlmbench measures a wide variety of system performance, and the full suite\nof benchmarks can take a long time on some platforms.  Consequently, we\noffer the capability to run only predefined subsets of benchmarks, one\nfor operating system-specific benchmarks and one for hardware-specific\nbenchmarks.  We also offer the option of running only selected benchmarks,\nwhich is useful during operating system development.\n\nPlease remember that if you intend to publish the results you either need\nto do a full run or one of the predefined OS or hardware subsets.\n\nSUBSET (ALL|HARDWARE|OS|DEVELOPMENT) [default all]: \n=====================================================================\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"FASTMEM [default no]"}),": Memory latency test. If you want to skip this test, set it to ",(0,o.jsx)(n.code,{children:"yes"}),". If you do not want to skip it, set it to ",(0,o.jsx)(n.code,{children:"no"}),". The default is ",(0,o.jsx)(n.code,{children:"no"}),", so we will keep the default value."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"=====================================================================\n\nThis benchmark measures, by default, memory latency for a number of\ndifferent strides.  That can take a long time and is most useful if you\nare trying to figure out your cache line size or if your cache line size\nis greater than 128 bytes.\n\nIf you are planning on sending in these results, please don't do a fast\nrun.\n\nAnswering yes means that we measure memory latency with a 128-byte stride.  \n\nFASTMEM [default no]: \n=====================================================================\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"SLOWFS [default no]"}),": File system latency test. If you want to skip this test, set it to ",(0,o.jsx)(n.code,{children:"yes"}),". If you do not want to skip it, set it to ",(0,o.jsx)(n.code,{children:"no"}),". The default is ",(0,o.jsx)(n.code,{children:"no"}),", so we will keep the default value."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"=====================================================================\n\nThis benchmark measures, by default, file system latency.  That can\ntake a long time on systems with old-style file systems (i.e., UFS,\nFFS, etc.).  Linux' ext2fs and Sun's tmpfs are fast enough that this\ntest is not painful.\n\nIf you are planning on sending in these results, please don't do a fast\nrun.\n\nIf you want to skip the file system latency tests, answer \"yes\" below.\n\nSLOWFS [default no]: \n=====================================================================\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"DISKS [default none]"}),": Disk bandwidth and seek time. You need to specify the disk device path, such as ",(0,o.jsx)(n.code,{children:"/dev/sda"}),". By default, it does not test (default is none), so we will keep the default value."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"=====================================================================\n\nThis benchmark can measure disk zone bandwidths and seek times.  These can\nbe turned into whizzy graphs that pretty much tell you everything you might\nneed to know about the performance of your disk.  \n\nThis takes a while and requires read access to a disk drive.  \nWrite is not measured, see disk.c to see how if you want to do so.\n\nIf you want to skip the disk tests, hit return below.\n\nIf you want to include disk tests, then specify the path to the disk\ndevice, such as /dev/sda.  For each disk that is readable, you'll be\nprompted for a one-line description of the drive, i.e., \n\n\tIomega IDE ZIP\nor\n\tHP C3725S 2GB on 10MB/sec NCR SCSI bus\n\nDISKS [default none]: \n=====================================================================\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"REMOTE [default none]"}),": Network testing requires two machines and ",(0,o.jsx)(n.code,{children:"rsh"})," access. This tests whether the testing machine can ",(0,o.jsx)(n.code,{children:"rsh"})," into another machine. By default, it does not test (default is none), so we will keep the default value."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"=====================================================================\n\nIf you are running on an idle network and there are other, identically\nconfigured systems, on the same wire (no gateway between you and them),\nand you have rsh access to them, then you should run the network part\nof the benchmarks to them.  Please specify any such systems as a space\nseparated list such as: ether-host fddi-host hippi-host.\n\nREMOTE [default none]: \n=====================================================================\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Processor mhz [default 999 MHz, 1.0010 nanosec clock]"}),": Tests the CPU frequency. The default is ",(0,o.jsx)(n.code,{children:"$MHZ"}),", which is the frequency determined by the program. You can also specify it based on your situation, e.g., 3500, in MHz. Here, we will keep the default value."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"=====================================================================\n\nCalculating mhz, please wait for a moment...\nI think your CPU mhz is \n\n\t999 MHz, 1.0010 nanosec clock\n\t\nbut I am frequently wrong.  If that is the wrong Mhz, type in your\nbest guess as to your processor speed.  It doesn't have to be exact,\nbut if you know it is around 800, say 800.  \n\nPlease note that some processors, such as the P4, have a core which\nis double-clocked, so on those processors the reported clock speed\nwill be roughly double the advertised clock rate.  For example, a\n1.8GHz P4 may be reported as a 3592MHz processor.\n\nProcessor mhz [default 999 MHz, 1.0010 nanosec clock]: \n=====================================================================\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"FSDIR [default /usr/tmp]"}),": A temporary directory to store test files. You can set your own value; the default is `/usr"]}),"\n",(0,o.jsx)(n.p,{children:"/tmp`, so we will keep the default value."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"=====================================================================\n\nWe need a place to store a 686 Mbyte file as well as create and delete a\nlarge number of small files.  We default to /usr/tmp.  If /usr/tmp is a\nmemory-resident file system (i.e., tmpfs), pick a different place.\nPlease specify a directory that has enough space and is a local file\nsystem.\n\nFSDIR [default /usr/tmp]: \n=====================================================================\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Status output file [default /dev/tty]"}),": The directory to store test output information. You can set your own value; the default is ",(0,o.jsx)(n.code,{children:"/dev/tty"}),", so we will keep the default value."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"=====================================================================\n\nlmbench outputs status information as it runs various benchmarks.\nBy default, this output is sent to /dev/tty, but you may redirect\nit to any file you wish (such as /dev/null...).\n\nStatus output file [default /dev/tty]: \n=====================================================================\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Mail results [default yes]"}),": Whether to email the test results. The default is ",(0,o.jsx)(n.code,{children:"yes"}),", so we will set it to ",(0,o.jsx)(n.code,{children:"no"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"=====================================================================\n\nThere is a database of benchmark results that is shipped with new\nreleases of lmbench.  Your results can be included in the database\nif you wish.  The more results the better, especially if they include\nremote networking.  If your results are interesting, i.e., for a new\nfast box, they may be made available on the lmbench web page, which is\n\n\thttp://www.bitmover.com/lmbench\n\nMail results [default yes]: no\nOK, no results mailed.\n=====================================================================\n"})}),"\n",(0,o.jsx)(n.p,{children:"After completing the above settings, the tests will start automatically."}),"\n",(0,o.jsx)(n.h2,{id:"test-results",children:"Test Results"}),"\n",(0,o.jsx)(n.h2,{id:"test-notes",children:"Test Notes"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(6540);const o={},r=s.createContext(o);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);