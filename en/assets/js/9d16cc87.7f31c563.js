"use strict";(self.webpackChunkrevyos_docs_new=self.webpackChunkrevyos_docs_new||[]).push([[9216],{7987:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"benchmark/stream","title":"Stream","description":"Instructions","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/benchmark/stream.md","sourceDirName":"benchmark","slug":"/benchmark/stream","permalink":"/revyos-docs-new/en/docs/benchmark/stream","draft":false,"unlisted":false,"editUrl":"https://github.com/kagura114/revyos-docs-new/docs/benchmark/stream.md","tags":[],"version":"current","frontMatter":{},"sidebar":"documentSidebar","previous":{"title":"Restart Test","permalink":"/revyos-docs-new/en/docs/benchmark/reboot"},"next":{"title":"Installation Instructions Overview","permalink":"/revyos-docs-new/en/docs/Installation/intro"}}');var s=n(4848),o=n(8453);const i={},a="Stream",c={},h=[{value:"Instructions",id:"instructions",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"stream",children:"Stream"})}),"\n",(0,s.jsx)(t.h2,{id:"instructions",children:"Instructions"}),"\n",(0,s.jsx)(t.p,{children:"The STREAM benchmark is a simple synthetic benchmark program that measures sustainable memory bandwidth (in MB/s) and the corresponding computation rate for simple vector kernels."}),"\n",(0,s.jsxs)(t.p,{children:["The stream consists of a single file, and to perform the test, you only need to compile ",(0,s.jsx)(t.code,{children:"stream.c"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"git clone <https://github.com/microseyuyu/STREAM.git>\ncd STREAM\ngcc -O3 -fopenmp -DN=2000000 -DNTIMES=10 stream.c -o stream\nexport OMP_NUM_THREADS=8\n./stream\n"})}),"\n",(0,s.jsx)(t.p,{children:"Parameter descriptions:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"-O3: Specifies the highest compilation optimization level, that is, 3."}),"\n",(0,s.jsx)(t.li,{children:"fopenmp: Enables OpenMP, suitable for multi-processor environments, to better achieve the actual maximum memory bandwidth. When enabled, the program defaults to running the number of threads equal to the number of CPU threads."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"DN=2000000: Specifies the size of the test arrays a[], b[], and c[] (Array size). This value has a significant impact on the test results (the default value for version 5.9 is 2000000. If stream.c is version 5.10, the parameter name changes to -DSTREAM_ARRAY_SIZE, with a default value of 10000000). Note: the size of the test array must be set much larger than the size of the CPU's highest-level cache (usually L3 Cache), otherwise it tests the throughput performance of the CPU cache, rather than the memory throughput performance."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"-DNTIMES=10: The number of repetitions, from which the optimal value is selected."}),"\n",(0,s.jsx)(t.li,{children:"OMP_NUM_THREADS=8: Number of threads."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Sample results:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"debian@lpi4a:~/Desktop/STREAM$ ./stream\n-------------------------------------------------------------\nSTREAM version $Revision: 5.10 $\n-------------------------------------------------------------\nThis system uses 8 bytes per array element.\n-------------------------------------------------------------\n*****  WARNING: ******\n      It appears that you set the preprocessor variable N when compiling this code.\n      This version of the code uses the preprocesor variable STREAM_ARRAY_SIZE to control the array size\n      Reverting to default value of STREAM_ARRAY_SIZE=10000000\n*****  WARNING: ******\nArray size = 10000000 (elements), Offset = 0 (elements)\nMemory per array = 76.3 MiB (= 0.1 GiB).\nTotal memory required = 228.9 MiB (= 0.2 GiB).\nEach kernel will be executed 10 times.\n The *best* time for each kernel (excluding the first iteration)\n will be used to compute the reported bandwidth.\n-------------------------------------------------------------\nNumber of Threads requested = 8\nNumber of Threads counted = 8\n-------------------------------------------------------------\nYour clock granularity/precision appears to be 1 microseconds.\nEach test below will take on the order of 21622 microseconds.\n   (= 21622 clock ticks)\nIncrease the size of the arrays if this shows that\nyou are not getting at least 20 clock ticks per test.\n-------------------------------------------------------------\nWARNING -- The above is only a rough guideline.\nFor best results, please be sure you know the\nprecision of your system timer.\n-------------------------------------------------------------\nFunction    Best Rate MB/s  Avg time     Min time     Max time\nCopy:            8364.2     0.019258     0.019129     0.019508\nScale:           8291.0     0.019572     0.019298     0.020162\nAdd:             6223.6     0.038835     0.038563     0.040011\nTriad:           6222.5     0.038776     0.038570     0.039470\n-------------------------------------------------------------\nSolution Validates: avg error less than 1.000000e-13 on all three arrays\n-------------------------------------------------------------\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(6540);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);